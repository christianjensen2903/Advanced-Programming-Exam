Exp ::= OrExp

OrExp ::= AndExp OrExpRest

OrExpRest ::= "||" AndExp OrExpRest
            | empty

AndExp ::= EqExp AndExpRest

AndExpRest ::= "&&" EqExp AndExpRest
             | empty

EqExp ::= AddSubExp EqExpRest

EqExpRest ::= "==" AddSubExp EqExpRest
            | empty

AddSubExp ::= MulDivExp AddSubExpRest

AddSubExpRest ::= "+" MulDivExp AddSubExpRest
                | "-" MulDivExp AddSubExpRest
                | empty

MulDivExp ::= UnaryExp MulDivExpRest

MulDivExpRest ::= "*" UnaryExp MulDivExpRest
                | "/" UnaryExp MulDivExpRest
                | empty

UnaryExp ::= LExp

LExp ::= "if" Exp "then" Exp "else" Exp
       | "\" var "->" Exp
       | "let" var "=" Exp "in" Exp
       | "loop" var "=" Exp "for" var "<" Exp "do" Exp
       | "loop" var "=" Exp "while" Exp "do" Exp
       | FExp

FExp ::= PostfixAtom FExpRest

FExpRest ::= PostfixAtom FExpRest
           | empty

PostfixAtom ::= Primary PostfixTail

PostfixTail ::= "." int PostfixTail
              | empty

Primary ::= var
          | int
          | bool
          | "(" ExpList ")"
          | "put" PostfixAtom PostfixAtom
          | "get" PostfixAtom

ExpList ::= Exp ExpListRest
          | empty

ExpListRest ::= "," Exp ExpListRest
              | empty